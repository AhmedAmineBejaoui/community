generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model User {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  email         String   @unique
  passwordHash  String
  fullName      String
  role          UserRole @default(USER)
  memberships   Membership[]
  status        UserStatus @default(PENDING)
  lastLoginAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("users")
}

model Membership {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  communityId String   @db.ObjectId
  role        Role
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
  community   Community @relation(fields: [communityId], references: [id])

  @@map("memberships")
}

model Community {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  slug       String   @unique
  joinPolicy JoinPolicy @default(INVITE_ONLY)
  memberships Membership[]
  posts      Post[]
  createdAt  DateTime @default(now())

  @@map("communities")
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  communityId String   @db.ObjectId
  authorId    String   @db.ObjectId
  type        PostType
  title       String
  content     String?
  images      String[]
  extra       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  community   Community @relation(fields: [communityId], references: [id])

  @@map("posts")
}

model ChatSession {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  communityId     String   @db.ObjectId
  userId          String?  @db.ObjectId
  status          String   @default("active")
  createdAt       DateTime @default(now())
  lastActivityAt  DateTime @default(now())
  messages        ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionId  String   @db.ObjectId
  role       String   // "user" | "assistant"
  content    String
  tokens     Int?
  latencyMs  Int?
  createdAt  DateTime @default(now())
  session    ChatSession @relation(fields: [sessionId], references: [id])

  @@map("chat_messages")
}

enum Role { 
  ADMIN 
  MODERATOR 
  RESIDENT 
}

enum UserStatus { 
  PENDING 
  ACTIVE 
  SUSPENDED 
}

enum JoinPolicy { 
  INVITE_ONLY 
  REQUEST_APPROVAL 
  CODE 
}

enum PostType { 
  ANNOUNCEMENT 
  SERVICE 
  LISTING 
  POLL 
}

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}
